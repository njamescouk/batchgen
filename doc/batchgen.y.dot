digraph G { title="batchgen.y"
"batch_file"[shape=record label="{<def>batch_file|{<statement_list_0>statement_list}}"];
"statement"[shape=record label="{<def>statement|{dos_command}|{<compound_statement_1>compound_statement}|{<selection_statement_2>selection_statement}|{<while_statement_3>while_statement}|{<labelled_statement_4>labelled_statement}|{<jump_statement_5>jump_statement}|{<function_definition_6>function_definition}|{<function_call_7>function_call}|{<error_8>error}}"];
"function_definition"[shape=record label="{<def>function_definition|{FDEF|identifier|(|)|<compound_statement_0>compound_statement}}"];
"function_call"[shape=record label="{<def>function_call|{<function_identifier_0>function_identifier|(|)}}"];
"labelled_statement"[shape=record label="{<def>labelled_statement|{CASE|<primary_expression_0>primary_expression|:|<statement_0>statement}|{DEFAULT|:|<statement_1>statement}}"];
"compound_statement"[shape=record label="{<def>compound_statement|{\{|<statement_list_0>statement_list|\}}|{\{|\}}}"];
"statement_list"[shape=record label="{<def>statement_list|{<statement_0>statement}|{<statement_list_1>statement_list|<statement_1>statement}}"];
"selection_statement"[shape=record label="{<def>selection_statement|{IF|(|<dos_expression_0>dos_expression|)|<statement_0>statement}|{IF|(|<dos_expression_1>dos_expression|)|<statement_1>statement|ELSE|<statement_1>statement}|{SWITCH|(|<primary_expression_2>primary_expression|)|<statement_2>statement}}"];
"while_statement"[shape=record label="{<def>while_statement|{WHILE|(|<dos_expression_0>dos_expression|)|<statement_0>statement}}"];
"jump_statement"[shape=record label="{<def>jump_statement|{BREAK|;}|{RETURN|;}|{RETURN|<primary_expression_2>primary_expression|;}}"];
"dos_expression"[shape=record label="{<def>dos_expression|{<logical_AND_expression_0>logical_AND_expression}|{<dos_expression_1>dos_expression|LOG_OR|<logical_AND_expression_1>logical_AND_expression}}"];
"logical_AND_expression"[shape=record label="{<def>logical_AND_expression|{<unary_expression_0>unary_expression}|{<logical_AND_expression_1>logical_AND_expression|LOG_AND|<unary_expression_1>unary_expression}}"];
"unary_expression"[shape=record label="{<def>unary_expression|{<dos_logical_expression_0>dos_logical_expression}|{(|<dos_expression_1>dos_expression|)}|{!|<unary_expression_2>unary_expression}}"];
"dos_logical_expression"[shape=record label="{<def>dos_logical_expression|{ERRORLEVEL|GE|<primary_expression_0>primary_expression}|{ERRORLEVEL|\<|<primary_expression_1>primary_expression}|{ERRORLEVEL|EQ|<primary_expression_2>primary_expression}|{ERRORLEVEL|NE|<primary_expression_3>primary_expression}|{EXIST|<primary_expression_4>primary_expression}|{<primary_expression_5>primary_expression|EQ|<primary_expression_5>primary_expression}|{<primary_expression_6>primary_expression|NE|<primary_expression_6>primary_expression}}"];
"primary_expression"[shape=record label="{<def>primary_expression|{identifier}|{<primary_expression_1>primary_expression|identifier}|{en_var}|{<primary_expression_3>primary_expression|en_var}|{param}|{<primary_expression_5>primary_expression|param}|{number}|{<primary_expression_7>primary_expression|number}|{empty}}"];
"function_identifier"[shape=record label="{<def>function_identifier|{func_id}}"];
"batch_file":statement_list_0 -> "statement_list":def [color = blue style = dotted];
"statement":compound_statement_1 -> "compound_statement":def [color = blue style = dotted];
"statement":selection_statement_2 -> "selection_statement":def [color = blue style = dotted];
"statement":while_statement_3 -> "while_statement":def [color = blue style = dotted];
"statement":labelled_statement_4 -> "labelled_statement":def [color = blue style = dotted];
"statement":jump_statement_5 -> "jump_statement":def [color = blue style = dotted];
"statement":function_definition_6 -> "function_definition":def [color = blue style = dotted];
"statement":function_call_7 -> "function_call":def [color = blue style = dotted];
"statement":error_8 -> "error":def [color = blue style = dotted];
"function_definition":compound_statement_0 -> "compound_statement":def [color = blue style = dotted];
"function_call":function_identifier_0 -> "function_identifier":def [color = blue style = dotted];
"labelled_statement":primary_expression_0 -> "primary_expression":def [color = blue style = dotted];
"labelled_statement":statement_0 -> "statement":def [color = blue style = dotted];
"labelled_statement":statement_1 -> "statement":def [color = blue style = dotted];
"compound_statement":statement_list_0 -> "statement_list":def [color = blue style = dotted];
"statement_list":statement_0 -> "statement":def [color = blue style = dotted];
"statement_list":statement_list_1 -> "statement_list":def [color = blue style = dotted];
"statement_list":statement_1 -> "statement":def [color = blue style = dotted];
"selection_statement":dos_expression_0 -> "dos_expression":def [color = blue style = dotted];
"selection_statement":statement_0 -> "statement":def [color = blue style = dotted];
"selection_statement":dos_expression_1 -> "dos_expression":def [color = blue style = dotted];
"selection_statement":statement_1 -> "statement":def [color = blue style = dotted];
"selection_statement":statement_1 -> "statement":def [color = blue style = dotted];
"selection_statement":primary_expression_2 -> "primary_expression":def [color = blue style = dotted];
"selection_statement":statement_2 -> "statement":def [color = blue style = dotted];
"while_statement":dos_expression_0 -> "dos_expression":def [color = blue style = dotted];
"while_statement":statement_0 -> "statement":def [color = blue style = dotted];
"jump_statement":primary_expression_2 -> "primary_expression":def [color = blue style = dotted];
"dos_expression":logical_AND_expression_0 -> "logical_AND_expression":def [color = blue style = dotted];
"dos_expression":dos_expression_1 -> "dos_expression":def [color = blue style = dotted];
"dos_expression":logical_AND_expression_1 -> "logical_AND_expression":def [color = blue style = dotted];
"logical_AND_expression":unary_expression_0 -> "unary_expression":def [color = blue style = dotted];
"logical_AND_expression":logical_AND_expression_1 -> "logical_AND_expression":def [color = blue style = dotted];
"logical_AND_expression":unary_expression_1 -> "unary_expression":def [color = blue style = dotted];
"unary_expression":dos_logical_expression_0 -> "dos_logical_expression":def [color = blue style = dotted];
"unary_expression":dos_expression_1 -> "dos_expression":def [color = blue style = dotted];
"unary_expression":unary_expression_2 -> "unary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_0 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_1 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_2 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_3 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_4 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_5 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_5 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_6 -> "primary_expression":def [color = blue style = dotted];
"dos_logical_expression":primary_expression_6 -> "primary_expression":def [color = blue style = dotted];
"primary_expression":primary_expression_1 -> "primary_expression":def [color = blue style = dotted];
"primary_expression":primary_expression_3 -> "primary_expression":def [color = blue style = dotted];
"primary_expression":primary_expression_5 -> "primary_expression":def [color = blue style = dotted];
"primary_expression":primary_expression_7 -> "primary_expression":def [color = blue style = dotted];
}

