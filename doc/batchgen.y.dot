/*
 yOutputMarkup y.output
 Jun  8 2015 14:33:54
*/
digraph G { title="y.output"
compound="true"

"$accept"[shape=record label="{<def>$accept|{<batch_file_0>batch_file|$end}}"];
"batch_file"[shape=record label="{<def>batch_file|{<statement_list_1>statement_list}}"];
"statement"[shape=record label="{<def>statement|{dos_command}|{<compound_statement_3>compound_statement}|{<selection_statement_4>selection_statement}|{<while_statement_5>while_statement}|{<labelled_statement_6>labelled_statement}|{<jump_statement_7>jump_statement}|{<function_definition_8>function_definition}|{<function_call_9>function_call}|{error}}"];
"$$1"[shape=record label="{<def>$$1|{--empty--}}"];
"$$2"[shape=record label="{<def>$$2|{--empty--}}"];
"function_definition"[shape=record label="{<def>function_definition|{FDEF|identifier|<$$1_13>$$1|'('|')'|<$$2_13>$$2|<compound_statement_13>compound_statement}}"];
"function_call"[shape=record label="{<def>function_call|{<function_identifier_14>function_identifier|'('|')'}}"];
"labelled_statement"[shape=record label="{<def>labelled_statement|{CASE|<primary_expression_15>primary_expression|':'|<statement_15>statement}|{DEFAULT|':'|<statement_16>statement}}"];
"compound_statement"[shape=record label="{<def>compound_statement|{\'\{\'|<statement_list_17>statement_list|\'\}\'}|{\'\{\'|\'\}\'}}"];
"statement_list"[shape=record label="{<def>statement_list|{<statement_19>statement}|{<statement_list_20>statement_list|<statement_20>statement}}"];
"selection_statement"[shape=record label="{<def>selection_statement|{IF|'('|<dos_expression_21>dos_expression|')'|<statement_21>statement}|{IF|'('|<dos_expression_22>dos_expression|')'|<statement_22>statement|ELSE|<statement_22>statement}|{SWITCH|'('|<primary_expression_24>primary_expression|<$$3_24>$$3|')'|<statement_24>statement}}"];
"$$3"[shape=record label="{<def>$$3|{--empty--}}"];
"$$4"[shape=record label="{<def>$$4|{--empty--}}"];
"while_statement"[shape=record label="{<def>while_statement|{WHILE|<$$4_26>$$4|'('|<dos_expression_26>dos_expression|')'|<statement_26>statement}}"];
"jump_statement"[shape=record label="{<def>jump_statement|{BREAK|';'}|{RETURN|';'}|{RETURN|<primary_expression_29>primary_expression|';'}}"];
"dos_expression"[shape=record label="{<def>dos_expression|{<logical_AND_expression_30>logical_AND_expression}|{<dos_expression_31>dos_expression|LOG_OR|<logical_AND_expression_31>logical_AND_expression}}"];
"logical_AND_expression"[shape=record label="{<def>logical_AND_expression|{<unary_expression_32>unary_expression}|{<logical_AND_expression_33>logical_AND_expression|LOG_AND|<unary_expression_33>unary_expression}}"];
"unary_expression"[shape=record label="{<def>unary_expression|{<dos_logical_expression_34>dos_logical_expression}|{'('|<dos_expression_35>dos_expression|')'}|{'!'|<unary_expression_36>unary_expression}}"];
"dos_logical_expression"[shape=record label="{<def>dos_logical_expression|{ERRORLEVEL|GE|<primary_expression_37>primary_expression}|{ERRORLEVEL|\'\<\'|<primary_expression_38>primary_expression}|{ERRORLEVEL|EQ|<primary_expression_39>primary_expression}|{ERRORLEVEL|NE|<primary_expression_40>primary_expression}|{EXIST|<primary_expression_41>primary_expression}|{<primary_expression_42>primary_expression|EQ|<primary_expression_42>primary_expression}|{<primary_expression_43>primary_expression|NE|<primary_expression_43>primary_expression}}"];
"primary_expression"[shape=record label="{<def>primary_expression|{identifier}|{<primary_expression_45>primary_expression|identifier}|{en_var}|{<primary_expression_47>primary_expression|en_var}|{param}|{<primary_expression_49>primary_expression|param}|{number}|{<primary_expression_51>primary_expression|number}|{empty}}"];
"function_identifier"[shape=record label="{<def>function_identifier|{func_id}}"];
"$accept":"batch_file_0" -> "batch_file":def [color = red style = dashed];
"batch_file":"statement_list_1" -> "statement_list":def [color = orange style = dashed];
"statement":"compound_statement_3" -> "compound_statement":def [color = green style = dashed];
"statement":"selection_statement_4" -> "selection_statement":def [color = blue style = dashed];
"statement":"while_statement_5" -> "while_statement":def [color = indigo style = dashed];
"statement":"labelled_statement_6" -> "labelled_statement":def [color = darkviolet style = dashed];
"statement":"jump_statement_7" -> "jump_statement":def [color = red style = dashed];
"statement":"function_definition_8" -> "function_definition":def [color = orange style = dashed];
"statement":"function_call_9" -> "function_call":def [color = gold style = dashed];
"function_definition":"$$1_13" -> "$$1":def [color = darkviolet style = dashed];
"function_definition":"$$2_13" -> "$$2":def [color = darkviolet style = dashed];
"function_definition":"compound_statement_13" -> "compound_statement":def [color = darkviolet style = dashed];
"function_call":"function_identifier_14" -> "function_identifier":def [color = red style = dashed];
"labelled_statement":"primary_expression_15" -> "primary_expression":def [color = orange style = dashed];
"labelled_statement":"statement_15" -> "statement":def [color = orange style = dashed];
"labelled_statement":"statement_16" -> "statement":def [color = gold style = dashed];
"compound_statement":"statement_list_17" -> "statement_list":def [color = green style = dashed];
"statement_list":"statement_19" -> "statement":def [color = indigo style = dashed];
"statement_list":"statement_list_20" -> "statement_list":def [color = darkviolet style = dashed];
"statement_list":"statement_20" -> "statement":def [color = darkviolet style = dashed];
"selection_statement":"dos_expression_21" -> "dos_expression":def [color = red style = dashed];
"selection_statement":"statement_21" -> "statement":def [color = red style = dashed];
"selection_statement":"dos_expression_22" -> "dos_expression":def [color = orange style = dashed];
"selection_statement":"statement_22" -> "statement":def [color = orange style = dashed];
"selection_statement":"statement_22" -> "statement":def [color = orange style = dashed];
"selection_statement":"primary_expression_24" -> "primary_expression":def [color = green style = dashed];
"selection_statement":"$$3_24" -> "$$3":def [color = green style = dashed];
"selection_statement":"statement_24" -> "statement":def [color = green style = dashed];
"while_statement":"$$4_26" -> "$$4":def [color = indigo style = dashed];
"while_statement":"dos_expression_26" -> "dos_expression":def [color = indigo style = dashed];
"while_statement":"statement_26" -> "statement":def [color = indigo style = dashed];
"jump_statement":"primary_expression_29" -> "primary_expression":def [color = orange style = dashed];
"dos_expression":"logical_AND_expression_30" -> "logical_AND_expression":def [color = gold style = dashed];
"dos_expression":"dos_expression_31" -> "dos_expression":def [color = green style = dashed];
"dos_expression":"logical_AND_expression_31" -> "logical_AND_expression":def [color = green style = dashed];
"logical_AND_expression":"unary_expression_32" -> "unary_expression":def [color = blue style = dashed];
"logical_AND_expression":"logical_AND_expression_33" -> "logical_AND_expression":def [color = indigo style = dashed];
"logical_AND_expression":"unary_expression_33" -> "unary_expression":def [color = indigo style = dashed];
"unary_expression":"dos_logical_expression_34" -> "dos_logical_expression":def [color = darkviolet style = dashed];
"unary_expression":"dos_expression_35" -> "dos_expression":def [color = red style = dashed];
"unary_expression":"unary_expression_36" -> "unary_expression":def [color = orange style = dashed];
"dos_logical_expression":"primary_expression_37" -> "primary_expression":def [color = gold style = dashed];
"dos_logical_expression":"primary_expression_38" -> "primary_expression":def [color = green style = dashed];
"dos_logical_expression":"primary_expression_39" -> "primary_expression":def [color = blue style = dashed];
"dos_logical_expression":"primary_expression_40" -> "primary_expression":def [color = indigo style = dashed];
"dos_logical_expression":"primary_expression_41" -> "primary_expression":def [color = darkviolet style = dashed];
"dos_logical_expression":"primary_expression_42" -> "primary_expression":def [color = red style = dashed];
"dos_logical_expression":"primary_expression_42" -> "primary_expression":def [color = red style = dashed];
"dos_logical_expression":"primary_expression_43" -> "primary_expression":def [color = orange style = dashed];
"dos_logical_expression":"primary_expression_43" -> "primary_expression":def [color = orange style = dashed];
"primary_expression":"primary_expression_45" -> "primary_expression":def [color = green style = dashed];
"primary_expression":"primary_expression_47" -> "primary_expression":def [color = indigo style = dashed];
"primary_expression":"primary_expression_49" -> "primary_expression":def [color = red style = dashed];
"primary_expression":"primary_expression_51" -> "primary_expression":def [color = gold style = dashed];
}

